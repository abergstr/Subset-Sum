To compile:
    Verbose version:
        g++ -Wall -DVERBOSE -O3 -o subset_sum subset_sum_main.cpp

    Quiet (fast) version:
        g++ -Wall -O3 -o subset_sum subset_sum_main.cpp

    For BOINC:
        g++ -DVERBOSE -DFALSE_ONLY -DENABLE_CHECKPOINTING -D_BOINC_ -O3 -msse3
            -funroll-loops -ftree-vectorize -Wall subset_sum_main.cpp
            -o subset_sum

Additional flags:
    -DTIMESTAMP             -- enable printing the starting, ending and
                               running time of the program
    -DFALSE_ONLY            -- only print out the failed sets
    -DENABLE_COLOR          -- enable ANSI colors. Sums that are required
                               and found (1s) will be printed green, and
                               sums that are required and not found (0s)
                               will be red.
    -DNEXT_SUBSET_JUN_LIU   -- Use Jun's generate next subset algorithm
    -DENABLE_CHECKPOINTING  -- Turns on checkpointing.
    -DSHOW_SUM_CALCULATION  -- Turns on printing out how the subset sums
                               are calculated. Useful for debugging and
                               this might be nice for analysis.

To run:
    ./subset_sum <M> <N>
    Where <M> is the maximum set value, and <N> is the number of elements 
    in the set.  This will calculate it for all subsets.

    ./subset_sum <M> <N> <i> <count>
    This will start from the <i>th subset of the problem for <M> and <N>,
    and compute the next <count> subsets.


TODO:
    *   Use a fast factorial function, speed up the n_choose_k function.
        Also, speed up the repeated calls to n_choose_k in the generate 
        subset function.

    *   Double check that the 'all_ones', 'or_single', 'or_equal' and 
        'shift_left' functions are working correctly.

    *   Update the code so that instead of checking all sums up to the 
        sum of all set elements, we only need to check up to the sum 
        of all set elements divided by 2 (as the sums are symmetric).

    *   We may need to do a different method of checkpointing when it
        comes to the output file generated which contains the failed
        sets.  The output file might get corrupted if the application
        was stopped while it was in the middle of printing out a failed
        set, which could make for issues in validation.

BUGS:
    *   No known bugs at the moment.

NOTES:
    *   Added Jun's algorithm for generating the next subset (looks like it 
        needs to be debugged). This can be turned on with:
            -DNEXT_SUBSET_JUN_LIU
